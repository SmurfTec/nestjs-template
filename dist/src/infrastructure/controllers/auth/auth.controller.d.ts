import { NotificationsUseCases } from './../../../usecases/notification/notifications.usecases';
import { AuthorizationUseCases } from 'src/usecases/auth/authorization.usecases';
import { MailService } from 'src/infrastructure/services/emails/email.service';
import { BcryptService } from './../../services/bcrypt/bcrypt.service';
import { AuthConfirmPhoneDto, AuthConfirmSignUpDto, AuthGoogleDto, AuthLoginDto, AuthSignUpDto, ForgotPasswordDto, ResendCodeDto, ResetPasswordDto, SetPasswordDto, UpdatePasswordDto, ValidatePasswordDto } from './dtos/auth.dto';
import { IsAuthPresenter } from './auth.presenter';
import { LoginUseCases } from '../../../usecases/auth/login.usecases';
import { IsAuthenticatedUseCases } from '../../../usecases/auth/is-authenticated.usecases';
import { LogoutUseCases } from '../../../usecases/auth/logout.usecases';
import { UserUseCases } from 'src/usecases/user/user.usecases';
import { ProfilesUseCases } from 'src/usecases/profile/profile.usecases';
export declare class AuthController {
    private readonly loginUsecaseProxy;
    private readonly logoutUsecaseProxy;
    private readonly isAuthUsecaseProxy;
    private readonly userUseCases;
    private readonly profileUseCases;
    private readonly bcryptService;
    private emailService;
    private authorizationUseCases;
    private notificationsUseCases;
    constructor(loginUsecaseProxy: LoginUseCases, logoutUsecaseProxy: LogoutUseCases, isAuthUsecaseProxy: IsAuthenticatedUseCases, userUseCases: UserUseCases, profileUseCases: ProfilesUseCases, bcryptService: BcryptService, emailService: MailService, authorizationUseCases: AuthorizationUseCases, notificationsUseCases: NotificationsUseCases);
    login(auth: AuthLoginDto, req: any, res: any, next: any): Promise<void>;
    googleLogin(auth: AuthGoogleDto, req: any, res: any, next: any): Promise<void>;
    SignUp(auth: AuthSignUpDto, req: any, res: any, next: any): Promise<void>;
    ConfirmUserSignUp(user: AuthConfirmSignUpDto, req: any, res: any, next: any): Promise<void>;
    ResendCode(auth: ResendCodeDto, req: any, res: any, next: any): Promise<void>;
    ConfirmUserPhone(data: AuthConfirmPhoneDto, req: any, res: any, next: any): Promise<void>;
    ConfirmPhoneSignUp(user: AuthConfirmSignUpDto, req: any, res: any, next: any): Promise<void>;
    logout(request: any): Promise<string>;
    isAuthenticated(request: any): Promise<IsAuthPresenter>;
    isAuthenticatedRequest(request: any): Promise<IsAuthPresenter>;
    forgotPassword(forgotDto: ForgotPasswordDto, req: any, res: any, next: any): Promise<void>;
    setPassword(code: number, body: SetPasswordDto, req: any, res: any, next: any): Promise<void>;
    resetPassword(body: ResetPasswordDto, code: string, req: any, res: any, next: any): Promise<void>;
    updatePassword(user: UpdatePasswordDto, req: any, res: any, next: any): Promise<void>;
    validatePassword(body: ValidatePasswordDto, req: any, res: any, next: any): Promise<void>;
    validateCode(code: string, req: any, res: any, next: any): Promise<void>;
    randomIntFromInterval(min: any, max: any): number;
    refresh(request: any): Promise<string>;
}
