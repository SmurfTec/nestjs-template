import { ConfigService } from '@nestjs/config';
import { DatabaseConfig } from '../../../domain/config/database.interface';
import { JWTConfig } from '../../../domain/config/jwt.interface';
export declare class EnvironmentConfigService implements DatabaseConfig, JWTConfig {
    private configService;
    constructor(configService: ConfigService);
    getShipstationAuth(): string;
    getFrontEndBaseUrl(): string;
    getTempDirectoryPath(): string;
    getAppName(): string;
    getMinioEndPoint(): string;
    getMinioPort(): string;
    getMinioAccessKey(): string;
    getMinioSecretKey(): string;
    getEmailHost(): string;
    getEmailUser(): string;
    getEmailPass(): string;
    getEmailPort(): string;
    getGoogleClientId(): string;
    getGoogleClientSecret(): string;
    getRunGisService(): boolean;
    getRabbitMQHost(): string;
    getRabbitMQPort(): string;
    getRabbitMQUsername(): string;
    getRabbitMQPassword(): string;
    getNceBaseUrl(): string;
    getRedisHost(): string;
    getStripeSecretKey(): string;
    getRedisPort(): string;
    getRedisPassword(): string;
    getRedisUsername(): string;
    getRedisUserPasswordRequired(): boolean;
    getTablesExcludedFromCRUDLogs(): string[];
    getJwtSecret(): string;
    getJwtExpirationTime(): string;
    getJwtRefreshSecret(): string;
    getJwtRefreshExpirationTime(): string;
    getDatabaseHost(): string;
    getDatabasePort(): number;
    getDatabaseUser(): string;
    getDatabasePassword(): string;
    getDatabaseName(): string;
    getDatabaseType(): any;
    getDatabaseSync(): boolean;
    getDatabaseMigrationRun(): boolean;
    getGisDatabaseHost(): string;
    getGisDatabasePort(): number;
    getGisDatabaseUser(): string;
    getGisDatabasePassword(): string;
    getGisDatabaseName(): string;
    getGisDatabaseType(): any;
    getGisDatabaseSchema(): any;
    getGisDatabaseSync(): boolean;
    getGisDatabaseMigrationRun(): boolean;
    getPORT(): string;
    getCacheManagerPort(): string;
    getCacheManagerHost(): string;
    getCacheManagerPassword(): any;
    getRabbitMQUrl(): string;
    getRedisUrl(): string;
    getRedisUrlWithUserAndPassword(): string;
    getRedisUrlWithoutUserAndPassword(): string;
    checkIfRedisUserAndPasswordExists(): boolean;
}
